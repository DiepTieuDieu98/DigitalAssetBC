// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicServer.Models.Database;

namespace MusicServer.Migrations
{
    [DbContext(typeof(MusicDBContext))]
    partial class MusicDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicServer.Models.Database.MusicAsset", b =>
                {
                    b.Property<string>("Name");

                    b.Property<string>("Uri");

                    b.HasKey("Name");

                    b.ToTable("MusicAssets");
                });

            modelBuilder.Entity("MusicServer.Models.Database.MusicAssetTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountValue");

                    b.Property<int>("BuyerId");

                    b.Property<string>("ContractAddress");

                    b.Property<DateTime>("DateCreated");

                    b.Property<long>("DateEnd");

                    b.Property<long>("DateStart");

                    b.Property<long>("DateTransferred");

                    b.Property<int>("FanType");

                    b.Property<string>("FromId")
                        .IsRequired();

                    b.Property<int?>("FromUserID");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsPermanent");

                    b.Property<string>("Key2");

                    b.Property<string>("MediaLink");

                    b.Property<Guid>("MusicId");

                    b.Property<Guid?>("MusicInfoId");

                    b.Property<string>("ToId")
                        .IsRequired();

                    b.Property<int?>("ToUserID");

                    b.Property<int>("TranType");

                    b.Property<string>("TransactionHash");

                    b.Property<int>("TransactionStatus");

                    b.HasKey("Id");

                    b.HasIndex("FromUserID");

                    b.HasIndex("MusicInfoId");

                    b.HasIndex("ToUserID");

                    b.ToTable("MusicAssetTransfers");
                });

            modelBuilder.Entity("MusicServer.Models.Database.MusicInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Album");

                    b.Property<string>("ContractAddress");

                    b.Property<int>("CreatureType");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<string>("DemoLink");

                    b.Property<string>("FullKey");

                    b.Property<string>("Key1");

                    b.Property<string>("Key2");

                    b.Property<string>("LicenceLink");

                    b.Property<long>("LicencePrice");

                    b.Property<string>("MusicLink");

                    b.Property<string>("Name");

                    b.Property<long>("OwnerId");

                    b.Property<int>("OwnerType");

                    b.Property<string>("PublishingYear");

                    b.Property<string>("Title");

                    b.Property<string>("TransactionHash");

                    b.Property<int>("TransactionStatus");

                    b.HasKey("Id");

                    b.ToTable("MusicInfos");
                });

            modelBuilder.Entity("MusicServer.Models.Database.ShareOwnerShip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MusicId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ShareOwnerShips");
                });

            modelBuilder.Entity("MusicServer.Models.Database.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ActivationCode");

                    b.Property<string>("ConfirmPassword");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("EmailID");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsEmailVerified");

                    b.Property<string>("LastName");

                    b.Property<string>("OwnerAddress");

                    b.Property<string>("OwnerPrivateKey");

                    b.Property<string>("Password");

                    b.Property<string>("ResetPasswordCode");

                    b.Property<int>("userType");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MusicServer.Models.Database.MusicAssetTransfer", b =>
                {
                    b.HasOne("MusicServer.Models.Database.User", "From")
                        .WithMany()
                        .HasForeignKey("FromUserID");

                    b.HasOne("MusicServer.Models.Database.MusicInfo", "MusicInfo")
                        .WithMany()
                        .HasForeignKey("MusicInfoId");

                    b.HasOne("MusicServer.Models.Database.User", "To")
                        .WithMany()
                        .HasForeignKey("ToUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
